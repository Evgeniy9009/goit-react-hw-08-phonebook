{"version":3,"file":"static/js/724.0907ec66.chunk.js","mappings":"6QAMA,EANqB,CACjBA,KAAM,GACNC,MAAO,GACPC,SAAU,ICcd,EAjBe,CACXD,MAAO,CACHE,MAAO,aACPH,KAAM,QACNI,KAAM,QACNC,YAAa,mBACbC,UAAU,GAEdJ,SAAU,CACNC,MAAO,gBACPH,KAAM,WACNI,KAAM,WACNC,YAAa,sCACbC,UAAU,I,SCAZC,EAAY,SAAH,GAAoB,IAAfC,EAAQ,EAARA,SAChB,GAA4CC,EAAAA,EAAAA,GAAQ,CAACC,aAAAA,EAAcF,SAAAA,IAA5DG,EAAK,EAALA,MAAOC,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAEtBC,GAAUC,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAQ,GAAE,IACjCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAQ,GAAE,IAEnCf,EAAmBU,EAAnBV,MAAOC,EAAYS,EAAZT,SAEd,OACI,kBAAMM,SAAUK,EAAa,WACzB,SAACK,EAAA,GAAS,QAACC,GAAIL,EAASM,MAAOnB,EAAOW,aAAcA,GAAkBS,EAAAA,SACtE,SAACH,EAAA,GAAS,QAACC,GAAIF,EAAYG,MAAOlB,EAAUU,aAAcA,GAAkBS,EAAAA,YAC5E,SAAC,KAAM,CAACjB,KAAK,SAAQ,qBAGjC,EAEA,IAEAG,EAAUe,aAAe,CACrBd,SAAU,WAAO,G,wBCzBN,SAASe,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAO5B,OACE,iBAAKC,UAAU,YAAW,WACxB,wCACA,SAAC,EAAS,CAACrB,SARC,SAACsB,GACfN,GAASO,EAAAA,EAAAA,IAAMD,GACjB,IAOKJ,IAAW,SAAC,IAAO,MAG1B,C,uDCxBA,MAA4B,8BAA5B,EAAkE,0B,SCG5DR,EAAY,SAAH,GAA0G,IAArGC,EAAE,EAAFA,GAAIhB,EAAK,EAALA,MAAOiB,EAAK,EAALA,MAAOpB,EAAI,EAAJA,KAAMY,EAAY,EAAZA,aAAcR,EAAI,EAAJA,KAAM4B,EAAO,EAAPA,QAASH,EAAS,EAATA,UAAWxB,EAAW,EAAXA,YAAaC,EAAQ,EAARA,SAAU2B,EAAO,EAAPA,QACjGC,EAAgBL,EAAS,UAAMM,EAAY,YAAIN,GAAcM,EAEnE,OACI,iBAAKN,UAAWM,EAAiB,UAC5BhC,IAAS,kBAAOiC,QAASjB,EAAG,SAAEhB,KAC/B,kBAAOgB,GAAIA,EAAIC,MAAOA,EAAOY,QAASA,EAAShC,KAAMA,EAAMqC,SAAUzB,EAAcR,KAAMA,EAAMyB,UAAWK,EAAe7B,YAAaA,EAAaC,SAAUA,EAAU2B,QAASA,MAG5L,EAEA,IAEAf,EAAUI,aAAe,CACrBlB,KAAM,OACNE,UAAU,E,kECId,IArBgB,SAAH,GAAkC,IAA7BI,EAAY,EAAZA,aAAcF,EAAQ,EAARA,SAC5B,GAA0B8B,EAAAA,EAAAA,WAAS,UAAI5B,IAAc,eAA9CC,EAAK,KAAE4B,EAAQ,KAiBtB,MAAO,CAAC5B,MAAAA,EAAO4B,SAAAA,EAAU3B,aAfJ,SAAH,GAAkB,IAAb4B,EAAM,EAANA,OACZpB,EAA8BoB,EAA9BpB,MAAOpB,EAAuBwC,EAAvBxC,KAAMI,EAAiBoC,EAAjBpC,KAAM4B,EAAWQ,EAAXR,QACpBS,EAAoB,aAATrC,EAAsB4B,EAAUZ,EACjDmB,GAAS,SAAAG,GAAS,yBACXA,GAAS,cACX1C,EAAOyC,GAAQ,GAExB,EAQuC5B,aANlB,SAAC8B,GAClBA,EAAEC,iBACFpC,GAAS,UAAIG,IACb4B,GAAS,UAAI7B,GACjB,EAGJ,C","sources":["components/LoginForm/initialState.js","components/LoginForm/fields.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","webpack://goit-react-hw-08-phonebook/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js"],"sourcesContent":["const initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n}\n\nexport default initialState;","const fields = {\n    email: {\n        label: \"User email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Enter user email\",\n        required: true,\n    },\n    password: {\n        label: \"User password\",\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Enter user password (min 6 symbols)\",\n        required: true,\n    }\n}\n\nexport default fields;","import { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { nanoid } from \"nanoid\";\nimport { Button } from '@chakra-ui/react'\n\n\nimport useForm from '../../shared/hooks/useForm';\n\nimport TextField from \"../../shared/components/TextField/TextField\";\n\nimport initialState from \"./initialState\";\nimport fields from \"./fields\";\n\nconst LoginForm = ({onSubmit}) => {\n    const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n\n    const emailId = useMemo(()=> nanoid(), []);\n    const passwordId = useMemo(()=> nanoid(), []);\n\n    const {email, password} = state;\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField id={emailId} value={email} handleChange={handleChange} {...fields.email} />\n            <TextField id={passwordId} value={password} handleChange={handleChange} {...fields.password} />\n            <Button type=\"submit\">Login</Button>\n        </form>\n    )\n}\n\nexport default LoginForm;\n\nLoginForm.defaultProps = {\n    onSubmit: () => {}\n}\n\nLoginForm.propTypes = {\n    onSubmit: PropTypes.func,\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { login } from \"../../redux/auth/auth-operations\";\nimport LoginForm from '../../components/LoginForm/LoginForm'\nimport { getLoading } from \"redux/auth/auth-selectors\";\nimport { Spinner } from '@chakra-ui/react'\n\n\n\nexport default function LoginPage() {\n  const dispatch = useDispatch();\n\n  const loading = useSelector(getLoading)\n\n  const onLogin = (data) => {\n    dispatch(login(data));\n  }\n\n  \n  return (\n    <div className='container'>\n      <h1>Login page</h1>\n      <LoginForm onSubmit={onLogin} />\n      {loading && <Spinner />}\n    </div>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"text-field_formGroup__8dkRW\",\"field\":\"text-field_field__HbtIT\"};","import PropTypes from \"prop-types\";\n\nimport styles from \"./text-field.module.css\";\n\nconst TextField = ({id, label, value, name, handleChange, type, checked, className, placeholder, required, pattern}) => {\n    const fullClassName = className ? `${styles.field} ${className}` : styles.field;\n\n    return (\n        <div className={styles.formGroup}>\n            {label && <label htmlFor={id}>{label}</label>}\n            <input id={id} value={value} checked={checked} name={name} onChange={handleChange} type={type} className={fullClassName} placeholder={placeholder} required={required} pattern={pattern} />\n        </div>\n    )\n}\n\nexport default TextField;\n\nTextField.defaultProps = {\n    type: \"text\",\n    required: false,\n}\n\nTextField.propTypes = {\n    id: PropTypes.string, \n    label: PropTypes.string, \n    value: PropTypes.string, \n    name: PropTypes.string.isRequired, \n    handleChange: PropTypes.func.isRequired, \n    type: PropTypes.string, \n    className: PropTypes.string, \n    placeholder: PropTypes.string,  \n    required: PropTypes.bool, \n    pattern: PropTypes.string,\n}","import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;"],"names":["name","email","password","label","type","placeholder","required","LoginForm","onSubmit","useForm","initialState","state","handleChange","handleSubmit","emailId","useMemo","nanoid","passwordId","TextField","id","value","fields","defaultProps","LoginPage","dispatch","useDispatch","loading","useSelector","getLoading","className","data","login","checked","pattern","fullClassName","styles","htmlFor","onChange","useState","setState","target","newValue","prevState","e","preventDefault"],"sourceRoot":""}