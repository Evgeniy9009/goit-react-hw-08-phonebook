{"version":3,"file":"static/js/72.584ef2eb.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","redux/filter/filter-selector.js","components/Filter/Filter.jsx","components/Contacts/Contacts.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\"};","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = ({ contacts }) => contacts.items;\nexport const getState = ({contacts}) => ({loading: contacts.loading, error: contacts.error})\n\n// export const getNumberOfAllContacts= ({contacts}) => contacts.items.length\n\nexport const getNumberOfAllContacts = createSelector([getContacts], (contacts) => {\n    return contacts.length\n})\n\nexport const getFilterContacts = ({ filter, contacts }) => {\n    if (!filter) {\n        return contacts.items\n    }\n\n    const normalezedFilter = filter.toLocaleLowerCase()\n    const filteredContacts = contacts.items.filter(({ name, phone }) => {\n        const normalizedName = name.toLocaleLowerCase()\n        const normalizedPhone = phone.toLocaleLowerCase()\n        const res = normalizedName.includes(normalezedFilter) || normalizedPhone.includes(normalezedFilter)\n        return res\n    })\n    return filteredContacts\n}\n","import { useState } from 'react'\nimport { nanoid } from 'nanoid'\nimport css from 'components/ContactForm/ContactForm.module.css'\nimport { addContact } from 'redux/contacts/contacts-operation'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getFilterContacts } from 'redux/contacts/contacts-selector'\n\nexport default function ContactForm() {\n\n    const [name, setName] = useState('')\n    const [phone, setPhone] = useState('')\n\n    const idName = nanoid()\n    const idPhone = nanoid()\n\n    const contacts = useSelector(getFilterContacts)\n    const dispatch = useDispatch()\n    \n    const onAddContact = (contact) => {\n        if (isDuplicate(contact)) {\n            return alert (`Name ${contact.name} or phone ${contact.phone} is already in contacts.`)\n        }\n        const action = addContact(contact)\n        dispatch(action)\n        setName('')\n        setPhone('')\n    }\n    \n\n    const isDuplicate = ({ name, phone }) => {\n        const res = contacts.find((item) => item.name.toLocaleLowerCase() === name.toLocaleLowerCase() || item.phone === phone)\n        return res\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        switch (name) {\n            case \"name\": \n                return setName(value)\n            case \"phone\":\n                return setPhone(value)\n            default: \n                return\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const contact= {name, phone}\n        onAddContact(contact)\n        console.log(contact)\n    }\n\n    return (\n    <form onSubmit={handleSubmit} className={css.form}>\n        <label htmlFor={idName}>Name</label>\n            <input\n                id={idName}\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n        <label htmlFor={idPhone}>Number</label>\n            <input\n                id={idPhone}\n                type=\"tel\"\n                name=\"phone\"\n                value={phone}\n                onChange={handleChange}\n                // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n        <button type='submit'>Add contact</button>\n    </form >\n        )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"btn\":\"ContactList_btn__6Piat\"};","\nimport css from 'components/ContactList/ContactList.module.css'\nimport { useDispatch, useSelector } from \"react-redux\";\n// import { removeContact } from 'redux/contacts/contacts-slice';\nimport { removeContact } from 'redux/contacts/contacts-operation';\nimport { getFilterContacts, getNumberOfAllContacts } from '../../redux/contacts/contacts-selector'\n\nexport default function ContactList() {\n  const items = useSelector(getFilterContacts)\n  const dispatch = useDispatch()\n\n  const contactsCount = useSelector(getNumberOfAllContacts)\n\n  const onRemoveContact = (id) => {\n    const action = removeContact(id)\n    dispatch(action)\n  }\n\n  const elements = items?.map(({ name, phone, id}) => {\n      return (\n      items.length>0 &&  <li className={css.item} key={id} > {name} {phone} <button className={css.btn} onClick={ () => {onRemoveContact(id)} }>Delete</button></li>\n      )\n    })\n  return (\n    <div>\n      <ul>{elements}</ul>\n      {items.length === 0 && <p>Ничего не найдено.</p>}\n      <p>Всего контактов: {contactsCount}</p> \n    </div>\n  )\n}\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"input\":\"Filter_input__N7T3z\"};","export const getFilter = store => store.filter","import css from 'components/Filter/Filter.module.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setFilter } from 'redux/filter/filter-slice'\nimport { getFilter } from '../../redux/filter/filter-selector'\n\n\nexport default function Filter() {\n    const filter = useSelector(getFilter)\n    const dispatch = useDispatch()\n\n    const handleChange = (e) => {\n        const { value } = e.target;\n        dispatch(setFilter(value))\n    }\n\n    return (\n        <div className={css.filter}>\n            <label htmlFor=\"filter\"> Find contacts by name</label>\n            <input className={css.input} id= \"filter\" type=\"text\" name='filter' onChange={handleChange} value={filter} />\n        </div>\n    )\n}\n\n\n\n","import ContactForm from 'components/ContactForm/ContactForm'\nimport ContactList from 'components/ContactList/ContactList'\nimport Filter from 'components/Filter/Filter'\n\nimport { useDispatch } from 'react-redux'\nimport { featchContacts} from 'redux/contacts/contacts-operation'\nimport { useEffect } from 'react'\n\nexport default function Contacts() {\n    // const contacts = useSelector(getFilterContacts)\n    // const filter = useSelector(getFilter)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(featchContacts())\n    }, [dispatch])\n\nreturn (\n    <div className='container'>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        \n        <h2>Contacts</h2>\n        <Filter  />\n        <ContactList />\n    </div>\n    )\n}\n","import Contacts from \"components/Contacts/Contacts\";\n\nconst ContactsPage = () => {\n    return(\n    <>\n        <Contacts/>    \n        </>\n    )\n}\n\nexport default ContactsPage"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getNumberOfAllContacts","contacts","items","getFilterContacts","filter","normalezedFilter","toLocaleLowerCase","phone","normalizedName","normalizedPhone","includes","ContactForm","useState","setName","setPhone","idName","nanoid","idPhone","useSelector","dispatch","useDispatch","isDuplicate","item","handleChange","e","target","onSubmit","preventDefault","contact","alert","action","addContact","onAddContact","console","log","className","css","htmlFor","id","type","onChange","pattern","title","required","ContactList","contactsCount","elements","onClick","removeContact","onRemoveContact","getFilter","store","Filter","setFilter","Contacts","useEffect","featchContacts"],"sourceRoot":""}